<project name="funz-client" default="help" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<property name="funz-root.dir" value="${basedir}/.." />
	<property name="funz.properties" location="../funz-profile/funz.properties" />

	<!-- funz dependent properties -->
	<property file="${funz.properties}" />

	<!-- verify that the ${funz.properties} file has been set -->
	<fail message="Set the funz properties file ${funz.properties} from funz-profile">
		<condition>
			<not>
				<and>
					<available file="${funz.properties}" type="file" />
				</and>
			</not>
		</condition>
	</fail>

	<!-- funz client dependent properties -->
	<property file="funz-client.properties" />


	<!-- Classpath for Configuration execution -->
	<path id="dist.classpath">
		<fileset dir="${dist.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- Clean targets -->
	<!-- ************* -->
	<target name="clean-build">
		<delete dir="${build.dir}" failonerror="false" />
		<delete dir="${tmp.dir}" failonerror="false" />
		<delete file="${quotas.hex}" />
	</target>

	<target name="clean-dist">
		<delete dir="${dist.dir}" failonerror="false" />
	</target>

	<target name="clean-doc">
		<delete dir="${doc.dir}" failonerror="false" />
	</target>

	<target name="clean-tests">
		<delete dir="${dist.dir}" failonerror="false" />
		<delete>
			<fileset dir="." includes="*.err" />
			<fileset dir="." includes="*.log" />
			<fileset dir="." includes="*.out" />
			<fileset dir="." includes="*.old.*" />
			<fileset dir="." includes="*.Rout" />
			<fileset dir="." includes="*.png" />
			<fileset dir="." includes="*.Rdata" />
			<fileset dir="." includes="*.R" />
			<fileset dir="." includes="*.txt" />
			<fileset dir="." includes="*.csv" />
			<fileset dir="." includes="*.sh" />
			<fileset dir="." includes="*.vbs" />
			<fileset dir="." includes="*.xlsx" />
			<fileset dir="." includes="*.listing" />
			<fileset dir="." includes="*.resume" />
			<fileset dir="." includes="*.conf" />
		</delete>
	</target>

	<target name="clean" depends="clean-build, clean-dist, clean-doc, clean-tests" description="clean almost everything that can be generated by ant targets" />

	<!-- Compile targets -->
	<!-- *************** -->
	<target name="compileOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn clean install -DskipTests=true'" />
		</exec>
	</target>

	<target name="compileOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn clean install -DskipTests=true'" />
		</exec>
	</target>

	<target name="compile" depends="compileOnWindows, compileOnUnix" description="compile the source " />


	<!-- Distribution targets -->
	<!-- ******************** -->

	<target name="distOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
		<!-- Copy core libs -->
		<exec dir="${funz-core.dir}" executable="sh">
			<arg line="-c 'mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
	</target>

	<target name="distOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
		<!-- Copy core libs -->
		<exec dir="${funz-core.dir}" executable="cmd">
			<arg line="/c mvn dependency:copy-dependencies -DoutputDirectory=${dist.lib.dir} -DincludeScope=runtime -DexcludeTransitive=true'" />
		</exec>
	</target>

	<target name="makeJar">
		<copy toFile="${dist.lib.dir}/${client.jar}">
			<fileset dir="${build.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="compile, distOnUnix, distOnWindows, makeJar" description="generate the distribution">

		<copy todir="${dist.scripts.dir}">
			<fileset dir="${scripts.dir}">
				<include name="Funz.*" />
			</fileset>
		</copy>
		<chmod perm="a+x">
			<fileset dir="${dist.scripts.dir}">
				<include name="Funz.*" />
			</fileset>
		</chmod>
		<copy todir="${dist.config.dir}">
			<fileset file="*.conf" />
		</copy>

		<java dir="${dist.dir}" classname="org.funz.conf.Configuration" fork="true" failonerror="true">
			<classpath>
				<fileset dir="${dist.lib.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<jvmarg value="-Dcharset=ISO-8859-1" />
			<jvmarg value="-Dapp.home=${dist.dir}" />
			<arg value="${config.dir}/${quotas.xml}" />
			<redirector output="${dist.dir}/${quotas.hex}" />
		</java>

		<mkdir dir="${dist.plugins.io.dir}" />
		<mkdir dir="${dist.plugins.doe.dir}" />
		<mkdir dir="${dist.samples.dir}" />
	</target>


	<!-- Tests targets -->
	<!-- ************* -->
	<target name="prepareTests" depends="distOnUnix, distOnWindows, makeJar">

		<copy todir="${dist.dir}/plugins">
			<fileset dir="${test.plugins.dir}" />
		</copy>

		<java classname="org.funz.conf.Configuration" fork="true" failonerror="true">
			<classpath>
				<fileset dir="${dist.lib.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<jvmarg value="-Dcharset=ISO-8859-1" />
			<jvmarg value="-Dapp.home=${dist.dir}" />
			<arg value="${test.config.dir}/${quotas.xml}" />
			<redirector output="${dist.dir}/${quotas.hex}" />
		</java>

		<copy todir="${dist.dir}">
			<fileset file="${test.config.dir}/*" />
		</copy>

		<mkdir dir="${dist.dir}/plugins/doe" />
		<jar destfile="${dist.dir}/plugins/doe/TESTDirect.jar">
			<fileset dir="${build.dir}">
				<include name="org/funz/doe/TESTDirect*" />
				<exclude name="org/funz/doe/TESTDirectW*" />
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/plugins/doe/TESTDirectWithPool.jar">
			<fileset dir="${build.dir}">
				<include name="org/funz/doe/TESTDirectW*" />
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/plugins/doe/TESTIterative.jar">
			<fileset dir="${build.dir}">
				<include name="org/funz/doe/TESTIterative*" />
				<exclude name="org/funz/doe/TESTIterativeW*" />
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/plugins/doe/TESTIterativeWithPool.jar">
			<fileset dir="${build.dir}">
				<include name="org/funz/doe/TESTIterativeW*" />
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/plugins/doe/TESTIterativeLoop.jar">
			<fileset dir="${build.dir}">
				<include name="org/funz/doe/TESTIterativeL*" />
			</fileset>
		</jar>

		<jar destfile="${dist.dir}/plugins/doe/TESTLotofcalc.jar">
			<fileset dir="${build.dir}">
				<include name="org/funz/doe/TESTLotofcalc*" />
			</fileset>
		</jar>

		<copy todir=".">
			<fileset file="${test.resources.dir}/*" />
		</copy>
		<chmod perm="a+x">
			<fileset dir=".">
				<include name="*.sh" />
				<include name="*.bat" />
			</fileset>
		</chmod>
	</target>


	<!-- Run calculator targets -->
	<!-- ********************** -->
	<path id="calculator.classpath">
		<fileset dir="${calculator.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="start-calculators" depends="compile, stop-calculators" unless="env.NO_CALCULATORS">
		<java classname="org.funz.main.RunCalculators" fork="true" spawn="true">
			<classpath refid="calculator.classpath" />
			<classpath path="${build.dir}" />
			<classpath path="${unit.test.jar}" />
			<arg value="8" />
			<arg value="3600" />
		</java>
	</target>

	<target name="stop-calculators" unless="env.NO_CALCULATORS">
		<delete file="calculators.lock" />
		<sleep seconds="10" />
	</target>

	<target name="test-cmd" depends="prepareTests, start-calculators" unless="env.NO_TEST_CMD">
		<fileset id="tests" dir="${root.dir}/src/test/cmd/" includes="**/*Test.bat" />

		<pathconvert pathsep="${line.separator}" property="tests-cmd.list" refid="tests">
			<map from="${root.dir}/src/test/cmd/" to="" />
		</pathconvert>
		<!--echo message="${tests-cmd.list}"/-->
		<!--echo message="================"/-->

		<for list="${tests-cmd.list}" param="test.file" delimiter="${line.separator}">
			<sequential>
				<echo message="=========================================" />
				<echo message="============= @{test.file} =============" />
				<echo message="=========================================" />

				<script language="javascript">
                    project.setProperty('startTime', new Date().getTime());
                    project.setProperty('startDate', new Date());
                </script>
				<echo level="error">Start: ${startDate}</echo>
				<exec executable="cmd" osfamily="unix" failonerror="false" timeout="2400000" resultproperty="@{test.file}.failed">
					<arg line="/c ${root.dir}/src/test/cmd/@{test.file}" />
				</exec>
				<script language="javascript">
                    project.setProperty('elapsedTime', new Date().getTime() - startTime)
                </script>
				<echo message=" Time: ${elapsedTime} ms" file="${root.dir}/@{test.file}.txt" append="true" />
				<echo level="error" message=" Time: ${elapsedTime} ms" />

				<loadfile property="@{test.file}.txt" srcFile="${root.dir}/@{test.file}.txt" />
				<echo message="${@{test.file}.txt}" />
				<if>
					<equals arg1="${@{test.file}.failed}" arg2="0" />
					<then>
					</then>
					<else>
						<property name="failed_cmd" value="1" />
					</else>
				</if>
			</sequential>
		</for>
		<antcall target="stop-calculators" />
		<fail message="Test failure detected for cmd, check test results." if="failed_cmd" />
	</target>

	<target name="read-quotas" description="read the test configuration">
		<java dir="${dist.dir}" classname="org.funz.conf.Configuration" fork="true">
			<classpath>
				<fileset dir="${dist.lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<filelist>
					<file name="${dist.dir}/${client.jar}" />
				</filelist>
			</classpath>
			<jvmarg value="-Dcharset=ISO-8859-1" />
			<jvmarg value="-Dapp.home=${dist.dir}" />
			<arg value="-dump" />
			<arg value="${quotas.hex}" />
		</java>
	</target>

	<!-- Documentation targets -->
	<!-- ********************* -->
	<target name="docOnUnix" if="isUnix">
		<exec dir="." executable="sh">
			<arg line="-c 'mvn javadoc:javadoc'" />
		</exec>
	</target>

	<target name="docOnWindows" if="isWindows">
		<exec dir="." executable="cmd">
			<arg line="/c mvn javadoc:javadoc'" />
		</exec>
	</target>

	<target name="doc" depends="docOnUnix, docOnWindows" description="generate the code documentation" />

	<!-- help -->
	<target name="help" description="display the help on standard output">
		<echo message="********************************" />
		<echo message="         Funz client" />
		<echo message="********************************" />
		<echo />
		<echo message="help            :   display this help" />
		<echo message="clean           :   clean everything that can be generated by ant targets" />
		<echo message="dist            :   generate a distribution" />
		<echo message="test            :   run tests" />
		<echo message="doc             :   generate the code documentation" />
	</target>
</project>
